"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mapIDNoNull = exports.mapID = void 0;
const index_1 = require("./index");
const axios_1 = __importDefault(require("axios"));
/**
 * Maps a friendly name or ID to an ID. Returns null if no ID could be found.
 * @param id {string} - is the ID or friendly name to lookup.
 * @param state {State} - is the application's state.
 */
function mapID(id, state) {
    return __awaiter(this, void 0, void 0, function* () {
        if (id === null)
            return null;
        // IDs starting with a ":" are actual IDs, so we should just remove the ":".
        if (id.startsWith(":"))
            return id.substring(1);
        const newKey = state.idsMap[id] ||
            (yield axios_1.default
                .get("https://cratecode.com/internal/api/id/" + id, {
                headers: {
                    authorization: state.key,
                },
            })
                .then((res) => {
                state.idsMap[id] = res.data.id;
                return res.data.id;
            })
                .catch((e) => {
                var _a;
                // If none was found, just use null.
                if (((_a = e.response) === null || _a === void 0 ? void 0 : _a.status) === 404)
                    return null;
                throw e;
            }));
        yield (0, index_1.delay)(state);
        return newKey;
    });
}
exports.mapID = mapID;
/**
 * Maps a friendly name or ID to an ID. Returns null if no ID could be found.
 * @param id {string} - is the ID or friendly name to lookup.
 * @param state {State} - is the application's state.
 */
function mapIDNoNull(id, state) {
    return __awaiter(this, void 0, void 0, function* () {
        const mappedID = yield mapID(id, state);
        if (mappedID === null) {
            throw new Error("Could not find an ID for " + id + ".");
        }
        return mappedID;
    });
}
exports.mapIDNoNull = mapIDNoNull;
//# sourceMappingURL=util.js.map