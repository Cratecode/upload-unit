"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleUnit = void 0;
const axios_1 = __importDefault(require("axios"));
const index_1 = require("./index");
const util_1 = require("./util");
/**
 * Handles a unit manifest and returns its actual ID.
 * @param state {State} - is the application's state.
 * @param id {string} - is the friendly name of the unit.
 * @param name {string} - is the display name of the unit.
 * @param lessons {Record<string, object>} - is the lessons map for the unit.
 */
function handleUnit(state, id, name, lessons) {
    return __awaiter(this, void 0, void 0, function* () {
        var _a, _b;
        // First, we need to figure out what the actual ID of our unit is.
        // If there isn't one, we'll just set it to null.
        const actualID = yield (0, util_1.mapID)(id, state);
        // Next, we need to go through the lessons and map from friendly names to ids.
        const map = {};
        for (const lessonID in lessons) {
            // Map the key.
            const newKey = yield (0, util_1.mapIDNoNull)(lessonID, state);
            // Map next and previous.
            const next = (_a = lessons[lessonID].next) !== null && _a !== void 0 ? _a : [];
            const previous = (_b = lessons[lessonID].previous) !== null && _b !== void 0 ? _b : [];
            if (typeof next !== "object" || !Array.isArray(next)) {
                throw new Error("next must be a string array!");
            }
            if (typeof previous !== "object" || !Array.isArray(previous)) {
                throw new Error("previous must be a string array!");
            }
            const newNext = [];
            const newPrevious = [];
            for (const item of next) {
                newNext.push(yield (0, util_1.mapIDNoNull)(item, state));
            }
            for (const item of previous) {
                newPrevious.push(yield (0, util_1.mapIDNoNull)(item, state));
            }
            map[newKey] = {
                next: newNext,
                previous: newPrevious,
                requireAll: Boolean(lessons[lessonID].requireAll),
            };
        }
        // Create or update the unit.
        const unitID = yield axios_1.default
            .put("https://cratecode.com/internal/api/unit", {
            id: actualID,
            friendlyName: id,
            name,
            data: map,
        }, {
            headers: {
                authorization: state.key,
            },
        })
            .then((res) => res.data.id);
        yield (0, index_1.delay)(state);
        // And finally, return the unit ID.
        return unitID;
    });
}
exports.handleUnit = handleUnit;
//# sourceMappingURL=unit.js.map