import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message ChangeOutput
 */
export interface ChangeOutput {
    /**
     * @generated from protobuf field: OutputType type = 1;
     */
    type: OutputType;
}
/**
 * @generated from protobuf enum OutputType
 */
export declare enum OutputType {
    /**
     * @generated from protobuf enum value: Console = 0;
     */
    Console = 0,
    /**
     * @generated from protobuf enum value: Web = 1;
     */
    Web = 1
}
declare class ChangeOutput$Type extends MessageType<ChangeOutput> {
    constructor();
    create(value?: PartialMessage<ChangeOutput>): ChangeOutput;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChangeOutput): ChangeOutput;
    internalBinaryWrite(message: ChangeOutput, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message ChangeOutput
 */
export declare const ChangeOutput: ChangeOutput$Type;
export {};
