import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message Main
 */
export interface Main {
    /**
     * @generated from protobuf field: uint32 start = 1;
     */
    start: number;
    /**
     * @generated from protobuf field: uint32 end = 2;
     */
    end: number;
    /**
     * @generated from protobuf field: bytes audio = 3;
     */
    audio: Uint8Array;
    /**
     * @generated from protobuf field: repeated Action action = 4;
     */
    action: Action[];
    /**
     * @generated from protobuf field: VideoState state = 5;
     */
    state?: VideoState;
}
/**
 * @generated from protobuf message Action
 */
export interface Action {
    /**
     * @generated from protobuf field: uint32 time = 1;
     */
    time: number;
    /**
     * @generated from protobuf field: ActionType type = 2;
     */
    type: ActionType;
    /**
     * @generated from protobuf field: optional bytes value = 3;
     */
    value?: Uint8Array;
}
/**
 * @generated from protobuf message VideoState
 */
export interface VideoState {
    /**
     * @generated from protobuf field: bytes files = 1;
     */
    files: Uint8Array;
    /**
     * @generated from protobuf field: optional string curOpen = 2;
     */
    curOpen?: string;
    /**
     * @generated from protobuf field: uint32 curToolbox = 3;
     */
    curToolbox: number;
    /**
     * @generated from protobuf field: optional uint32 curOutput = 4;
     */
    curOutput?: number;
}
/**
 * @generated from protobuf enum ActionType
 */
export declare enum ActionType {
    /**
     * ChangeToolbox
     *
     * @generated from protobuf enum value: ChangeToolbox = 0;
     */
    ChangeToolbox = 0,
    /**
     * ToggleFS
     *
     * @generated from protobuf enum value: OpenFolder = 1;
     */
    OpenFolder = 1,
    /**
     * ToggleFS
     *
     * @generated from protobuf enum value: CloseFolder = 2;
     */
    CloseFolder = 2,
    /**
     * ToggleFS
     *
     * @generated from protobuf enum value: OpenFile = 3;
     */
    OpenFile = 3,
    /**
     * BSON(ChangeSet.toJSON())
     *
     * @generated from protobuf enum value: ChangeText = 4;
     */
    ChangeText = 4,
    /**
     * null
     *
     * @generated from protobuf enum value: Run = 5;
     */
    Run = 5,
    /**
     * ToggleFS
     *
     * @generated from protobuf enum value: CreateFile = 6;
     */
    CreateFile = 6,
    /**
     * ToggleFS
     *
     * @generated from protobuf enum value: CreateFolder = 7;
     */
    CreateFolder = 7,
    /**
     * ToggleFS
     *
     * @generated from protobuf enum value: DeleteFile = 8;
     */
    DeleteFile = 8,
    /**
     * ToggleFS
     *
     * @generated from protobuf enum value: DeleteFolder = 9;
     */
    DeleteFolder = 9,
    /**
     * Move
     *
     * @generated from protobuf enum value: Move = 10;
     */
    Move = 10,
    /**
     * ChangeOutput
     *
     * @generated from protobuf enum value: ChangeOutput = 11;
     */
    ChangeOutput = 11,
    /**
     * null
     *
     * @generated from protobuf enum value: FocusToolbox = 12;
     */
    FocusToolbox = 12,
    /**
     * null
     *
     * @generated from protobuf enum value: FocusCode = 13;
     */
    FocusCode = 13,
    /**
     * null
     *
     * @generated from protobuf enum value: FocusOutput = 14;
     */
    FocusOutput = 14,
    /**
     * BSON(EditorSelection.toJSON())
     *
     * @generated from protobuf enum value: CodeSelect = 15;
     */
    CodeSelect = 15
}
declare class Main$Type extends MessageType<Main> {
    constructor();
    create(value?: PartialMessage<Main>): Main;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Main): Main;
    internalBinaryWrite(message: Main, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message Main
 */
export declare const Main: Main$Type;
declare class Action$Type extends MessageType<Action> {
    constructor();
    create(value?: PartialMessage<Action>): Action;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Action): Action;
    internalBinaryWrite(message: Action, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message Action
 */
export declare const Action: Action$Type;
declare class VideoState$Type extends MessageType<VideoState> {
    constructor();
    create(value?: PartialMessage<VideoState>): VideoState;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VideoState): VideoState;
    internalBinaryWrite(message: VideoState, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message VideoState
 */
export declare const VideoState: VideoState$Type;
export {};
