"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VideoState = exports.Action = exports.Main = exports.ActionType = void 0;
const runtime_1 = require("@protobuf-ts/runtime");
const runtime_2 = require("@protobuf-ts/runtime");
const runtime_3 = require("@protobuf-ts/runtime");
const runtime_4 = require("@protobuf-ts/runtime");
const runtime_5 = require("@protobuf-ts/runtime");
/**
 * @generated from protobuf enum ActionType
 */
var ActionType;
(function (ActionType) {
    /**
     * ChangeToolbox
     *
     * @generated from protobuf enum value: ChangeToolbox = 0;
     */
    ActionType[ActionType["ChangeToolbox"] = 0] = "ChangeToolbox";
    /**
     * ToggleFS
     *
     * @generated from protobuf enum value: OpenFolder = 1;
     */
    ActionType[ActionType["OpenFolder"] = 1] = "OpenFolder";
    /**
     * ToggleFS
     *
     * @generated from protobuf enum value: CloseFolder = 2;
     */
    ActionType[ActionType["CloseFolder"] = 2] = "CloseFolder";
    /**
     * ToggleFS
     *
     * @generated from protobuf enum value: OpenFile = 3;
     */
    ActionType[ActionType["OpenFile"] = 3] = "OpenFile";
    /**
     * BSON(ChangeSet.toJSON())
     *
     * @generated from protobuf enum value: ChangeText = 4;
     */
    ActionType[ActionType["ChangeText"] = 4] = "ChangeText";
    /**
     * null
     *
     * @generated from protobuf enum value: Run = 5;
     */
    ActionType[ActionType["Run"] = 5] = "Run";
    /**
     * ToggleFS
     *
     * @generated from protobuf enum value: CreateFile = 6;
     */
    ActionType[ActionType["CreateFile"] = 6] = "CreateFile";
    /**
     * ToggleFS
     *
     * @generated from protobuf enum value: CreateFolder = 7;
     */
    ActionType[ActionType["CreateFolder"] = 7] = "CreateFolder";
    /**
     * ToggleFS
     *
     * @generated from protobuf enum value: DeleteFile = 8;
     */
    ActionType[ActionType["DeleteFile"] = 8] = "DeleteFile";
    /**
     * ToggleFS
     *
     * @generated from protobuf enum value: DeleteFolder = 9;
     */
    ActionType[ActionType["DeleteFolder"] = 9] = "DeleteFolder";
    /**
     * Move
     *
     * @generated from protobuf enum value: Move = 10;
     */
    ActionType[ActionType["Move"] = 10] = "Move";
    /**
     * ChangeOutput
     *
     * @generated from protobuf enum value: ChangeOutput = 11;
     */
    ActionType[ActionType["ChangeOutput"] = 11] = "ChangeOutput";
})(ActionType = exports.ActionType || (exports.ActionType = {}));
// @generated message type with reflection information, may provide speed optimized methods
class Main$Type extends runtime_5.MessageType {
    constructor() {
        super("Main", [
            { no: 1, name: "start", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "end", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "audio", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 4, name: "action", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => exports.Action },
            { no: 5, name: "state", kind: "message", T: () => exports.VideoState }
        ]);
    }
    create(value) {
        const message = { start: 0, end: 0, audio: new Uint8Array(0), action: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 start */ 1:
                    message.start = reader.uint32();
                    break;
                case /* uint32 end */ 2:
                    message.end = reader.uint32();
                    break;
                case /* bytes audio */ 3:
                    message.audio = reader.bytes();
                    break;
                case /* repeated Action action */ 4:
                    message.action.push(exports.Action.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* VideoState state */ 5:
                    message.state = exports.VideoState.internalBinaryRead(reader, reader.uint32(), options, message.state);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* uint32 start = 1; */
        if (message.start !== 0)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.start);
        /* uint32 end = 2; */
        if (message.end !== 0)
            writer.tag(2, runtime_1.WireType.Varint).uint32(message.end);
        /* bytes audio = 3; */
        if (message.audio.length)
            writer.tag(3, runtime_1.WireType.LengthDelimited).bytes(message.audio);
        /* repeated Action action = 4; */
        for (let i = 0; i < message.action.length; i++)
            exports.Action.internalBinaryWrite(message.action[i], writer.tag(4, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* VideoState state = 5; */
        if (message.state)
            exports.VideoState.internalBinaryWrite(message.state, writer.tag(5, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Main
 */
exports.Main = new Main$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Action$Type extends runtime_5.MessageType {
    constructor() {
        super("Action", [
            { no: 1, name: "time", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "type", kind: "enum", T: () => ["ActionType", ActionType] },
            { no: 3, name: "value", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value) {
        const message = { time: 0, type: 0 };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 time */ 1:
                    message.time = reader.uint32();
                    break;
                case /* ActionType type */ 2:
                    message.type = reader.int32();
                    break;
                case /* optional bytes value */ 3:
                    message.value = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* uint32 time = 1; */
        if (message.time !== 0)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.time);
        /* ActionType type = 2; */
        if (message.type !== 0)
            writer.tag(2, runtime_1.WireType.Varint).int32(message.type);
        /* optional bytes value = 3; */
        if (message.value !== undefined)
            writer.tag(3, runtime_1.WireType.LengthDelimited).bytes(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Action
 */
exports.Action = new Action$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VideoState$Type extends runtime_5.MessageType {
    constructor() {
        super("VideoState", [
            { no: 1, name: "files", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "curOpen", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "curToolbox", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "curOutput", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { files: new Uint8Array(0), curOpen: "", curToolbox: 0 };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes files */ 1:
                    message.files = reader.bytes();
                    break;
                case /* string curOpen */ 2:
                    message.curOpen = reader.string();
                    break;
                case /* uint32 curToolbox */ 3:
                    message.curToolbox = reader.uint32();
                    break;
                case /* optional uint32 curOutput */ 4:
                    message.curOutput = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes files = 1; */
        if (message.files.length)
            writer.tag(1, runtime_1.WireType.LengthDelimited).bytes(message.files);
        /* string curOpen = 2; */
        if (message.curOpen !== "")
            writer.tag(2, runtime_1.WireType.LengthDelimited).string(message.curOpen);
        /* uint32 curToolbox = 3; */
        if (message.curToolbox !== 0)
            writer.tag(3, runtime_1.WireType.Varint).uint32(message.curToolbox);
        /* optional uint32 curOutput = 4; */
        if (message.curOutput !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).uint32(message.curOutput);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message VideoState
 */
exports.VideoState = new VideoState$Type();
//# sourceMappingURL=main.js.map