import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message ChangeToolbox
 */
export interface ChangeToolbox {
    /**
     * @generated from protobuf field: ToolboxType type = 1;
     */
    type: ToolboxType;
}
/**
 * @generated from protobuf enum ToolboxType
 */
export declare enum ToolboxType {
    /**
     * @generated from protobuf enum value: Info = 0;
     */
    Info = 0,
    /**
     * @generated from protobuf enum value: Files = 1;
     */
    Files = 1
}
declare class ChangeToolbox$Type extends MessageType<ChangeToolbox> {
    constructor();
    create(value?: PartialMessage<ChangeToolbox>): ChangeToolbox;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChangeToolbox): ChangeToolbox;
    internalBinaryWrite(message: ChangeToolbox, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message ChangeToolbox
 */
export declare const ChangeToolbox: ChangeToolbox$Type;
export {};
