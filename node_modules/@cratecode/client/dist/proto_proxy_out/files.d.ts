import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message Files
 */
export interface Files {
    /**
     * @generated from protobuf field: repeated File files = 1;
     */
    files: File[];
}
/**
 * @generated from protobuf message File
 */
export interface File {
    /**
     * @generated from protobuf field: string path = 1;
     */
    path: string;
    /**
     * @generated from protobuf field: optional bytes data = 2;
     */
    data?: Uint8Array;
}
declare class Files$Type extends MessageType<Files> {
    constructor();
    create(value?: PartialMessage<Files>): Files;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Files): Files;
    internalBinaryWrite(message: Files, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message Files
 */
export declare const Files: Files$Type;
declare class File$Type extends MessageType<File> {
    constructor();
    create(value?: PartialMessage<File>): File;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: File): File;
    internalBinaryWrite(message: File, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message File
 */
export declare const File: File$Type;
export {};
