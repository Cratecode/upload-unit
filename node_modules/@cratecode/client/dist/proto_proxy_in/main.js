"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Main = exports.MessageType = void 0;
const runtime_1 = require("@protobuf-ts/runtime");
const runtime_2 = require("@protobuf-ts/runtime");
const runtime_3 = require("@protobuf-ts/runtime");
const runtime_4 = require("@protobuf-ts/runtime");
/**
 * @generated from protobuf enum MessageType
 */
var MessageType;
(function (MessageType) {
    /**
     * @generated synthetic value - protobuf-ts requires all enums to have a 0 value
     */
    MessageType[MessageType["UNSPECIFIED$"] = 0] = "UNSPECIFIED$";
    /**
     * @generated from protobuf enum value: SetFile = 1;
     */
    MessageType[MessageType["SetFile"] = 1] = "SetFile";
    /**
     * @generated from protobuf enum value: DeleteFile = 2;
     */
    MessageType[MessageType["DeleteFile"] = 2] = "DeleteFile";
    /**
     * @generated from protobuf enum value: GetFiles = 3;
     */
    MessageType[MessageType["GetFiles"] = 3] = "GetFiles";
    /**
     * @generated from protobuf enum value: InitCommand = 4;
     */
    MessageType[MessageType["InitCommand"] = 4] = "InitCommand";
    /**
     * @generated from protobuf enum value: ResizeBash = 5;
     */
    MessageType[MessageType["ResizeBash"] = 5] = "ResizeBash";
    /**
     * @generated from protobuf enum value: RequestClientFile = 6;
     */
    MessageType[MessageType["RequestClientFile"] = 6] = "RequestClientFile";
})(MessageType || (exports.MessageType = MessageType = {}));
// @generated message type with reflection information, may provide speed optimized methods
class Main$Type extends runtime_4.MessageType {
    constructor() {
        super("Main", [
            { no: 1, name: "type", kind: "enum", T: () => ["MessageType", MessageType] },
            { no: 2, name: "value", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.type = 0;
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* MessageType type */ 1:
                    message.type = reader.int32();
                    break;
                case /* optional bytes value */ 2:
                    message.value = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* MessageType type = 1; */
        if (message.type !== 0)
            writer.tag(1, runtime_1.WireType.Varint).int32(message.type);
        /* optional bytes value = 2; */
        if (message.value !== undefined)
            writer.tag(2, runtime_1.WireType.LengthDelimited).bytes(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Main
 */
exports.Main = new Main$Type();
//# sourceMappingURL=main.js.map